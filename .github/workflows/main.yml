name: ZenLib GitHub CI
    
on:
  push:
    branches: [ master ] #Everytime master branch is updated
    #paths: ['!hooks/*', '!.clang-format', '!.gitignore', '!create_git_hooks.sh', '!LICENSE', '!README.md'] #only when these files are modifed
  pull_request:
    branches: [ master ] #for every pull request going to master
    #paths: ['!hooks/*', '!.clang-format', '!.gitignore', '!create_git_hooks.sh', '!LICENSE', '!README.md'] #only when these files are modifed

jobs:
  build: 

    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, windows-latest]
        include:
          - os: ubuntu-18.04
            name: Ubuntu 18.04 GCC
            cc: gcc-8
            cxx: g++-8
          - os: windows-latest
            name: Windows Latest MSVC
            cc: cl
            cxx: cl
            
    steps:
    - uses: actions/checkout@v2 #checkout our repo     
    
    - name: Install dependencies via apt
      if: runner.os == 'Linux'
      shell: bash
      run: |
        set -e
        sudo apt-get update
        sudo apt-get install apt-transport-https ca-certificates gnupg software-properties-common wget gcc-8 g++-8
        wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | sudo apt-key add - #newer cmake
        sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main'
        sudo apt-get update
        sudo apt-get install cmake
    
    - name: Build ZenLib
      shell: bash
      run: |
        set -e
        export CC="${{ matrix.cc }}"
        export CXX="${{ matrix.cxx }}"
        rm -rf build
        mkdir build
        cd build
        cmake -DZENLIB_BUILD_TESTS=ON ..
        cmake --build . --parallel $(nproc)
    
    - name: List ZenLib build directory
      shell: bash
      run: |
        set -e
        find build/

    - name: Run VDFS test
      shell: bash
      run: |
        set -e
        cd build/test/
        TESTRESULT=$(./test_vdfs)
        printf "$TESTRESULT\n"
        if [ $(echo "$TESTRESULT" | grep -e 'FAILED') ]; then
          exit 1
        fi
